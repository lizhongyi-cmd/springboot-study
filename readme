spring boot 学习笔记

配置文件分类
    spring boot 是基于约定的，很多配置都配有默认值。可以通过application.properties或者application.yml 进行配置。加载顺序：application.properties > application.yml >application.yaml

    properties:(键值对的形式）
        server.port=8080
    yml:(缩进的形式）
        server:
            port:8080(必须要有空格）

yaml:
    是一种直观的能够被电脑识别的数据序列化格式，并且容易被人阅读，容易和脚本语言交互的.yml是以数据为核心的，比传统的xml更简洁
    基本语法：
        大小写敏感
        数据值前面必须有空格，作为分割符
        使用缩进表示层级关系
        缩进时不允许使用tab键，只允许使用空格（idea环境下按tab会自动转换成空格）
        缩进的空格数目不重要，只要相同层级的元素左侧对齐即可
        #表示注释掉整行
    数据格式：
        对象（map）：键值对的集合
            person:
                name: zhangSan
            行内写法
            person: {name: zhangSan}
        数组：一组按照次序排列的值
            address:
                - beijing
                - shanghai
                - tianjin
            行内写法
            address: [beijing,shanghai]
        纯量（常量）:单个的不可再分割的数值
            msg1: 'hello \n world' 单引号忽略转义字符
            msg2: "hello \n world" 双引号识别转义字符


    参数引用：
        name: zhangSan
        person:
            name: ${name}

读取配置文件内容:
    1. @Value
    2. Environment
    3. @ConfigurationProperties

profile(用来完成在不同环境下，配置动态切换功能的)
    我们在开发应用的时候，通常一套程序会安装到不同的环境中，比如：开发，测试，生产等。其中数据库地址，服务器端口等配置不同，每次打包都需要修改配置文件，非常麻烦。profile的功能就是来进行动态配置切换的。
    profile配置方式：
        多profile文件方式
        yml多文档方式:
            使用---进行分割
    profile激活方式
        配置文件

        虚拟机参数
            -D spring.profiles.active=test
        命令行参数
            --spring.profiles.active=pro

        jar包运行方式：
            打开命令行：
                java -jar ./springboot-study.jar
                --spring.profiles.active=pro

内部配置加载顺序
    springboot程序应用启动是，会从以下位置加载配置文件：
        1. 当前项目下的config目录下
        2. 当前项目的根目录
        3. classpath的/config目录
        4. classpath的根目录
        加载顺序为上面的排列顺序，高优先级配置的属性会生效
        修改项目的访问路径，默认值为/
            server.servlet.context-path=/hello

外部配置加载顺序
    使用命令行的格式：
        java -jar ./xxx.jar --server.port=8082 --server.servlet.context-path=/hehe

    指定外部文件的路径
        java -jar ./xxx.jar --spring.config.location=e://application.properties(默认会读取和jar包同级的配置文件）


整合其他框架
    整合Junit来进行单元测试

    整合redis

    整合mybatis

springboot高级部分

原理分析
    对spring框架的高度封装
    自动配置：
        condition:通过这个功能能够实现选择性的创建bean操作
        切换内置服务器
        注解的使用



    监听机制：
    启动流程分析：


监控



项目部署



